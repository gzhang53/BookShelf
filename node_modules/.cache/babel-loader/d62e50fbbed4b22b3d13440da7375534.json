{"ast":null,"code":"var _jsxFileName = \"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookSearch = ({\n  books,\n  onUpdateBook\n}) => {\n  _s();\n\n  const [resBooks, setResBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [booksMap, setBooksMap] = useState(new Map());\n\n  const updateQuery = query => {\n    setQuery(query);\n  };\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const res = await BooksAPI.search(String(query));\n      res.error !== 'empty query' ? AddShelfInfo(res, books) : setResBooks();\n    };\n\n    query !== '' ? getBooks() : setResBooks();\n  });\n\n  const AddShelfInfo = (bookSearch, books) => {\n    const map = new Map();\n    const bookDict = books.map(book => map.set(book.id, book));\n    setBooksMap(bookDict);\n    console.log(booksMap);\n    console.log(tyypeof(booksMap));\n    return bookDict;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"book-data\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: query,\n          onChange: e => updateQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"books-grid\",\n      children: resBooks ? resBooks.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onUpdateBook: onUpdateBook\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Books found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookSearch, \"294LYxnQ1Mi4OY3FYcVNryj39KY=\");\n\n_c = BookSearch;\nexport default BookSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookSearch\");","map":{"version":3,"sources":["/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js"],"names":["React","useEffect","useState","BooksAPI","Book","Link","BookSearch","books","onUpdateBook","resBooks","setResBooks","query","setQuery","booksMap","setBooksMap","Map","updateQuery","getBooks","res","search","String","error","AddShelfInfo","bookSearch","map","bookDict","book","set","id","console","log","tyypeof","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAA2B;AAAA;;AAG1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAAyBZ,QAAQ,CAAC,IAAIa,GAAJ,EAAD,CAAvC;;AAGA,QAAMC,WAAW,GAAIL,KAAD,IAAW;AAC3BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAED,GAHH;;AAKEV,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMgB,QAAQ,GAAG,YAAY;AAC3B,YAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACgB,MAAT,CAAgBC,MAAM,CAACT,KAAD,CAAtB,CAAlB;AACAO,MAAAA,GAAG,CAACG,KAAJ,KAAc,aAAd,GACIC,YAAY,CAACJ,GAAD,EAAKX,KAAL,CADhB,GAEIG,WAAW,EAFf;AAGD,KALD;;AAOAC,IAAAA,KAAK,KAAK,EAAV,GAAeM,QAAQ,EAAvB,GAA4BP,WAAW,EAAvC;AAGH,GAZQ,CAAT;;AAcF,QAAMY,YAAY,GAAE,CAACC,UAAD,EAAahB,KAAb,KAAqB;AAErC,UAAMiB,GAAG,GAAG,IAAIT,GAAJ,EAAZ;AAEA,UAAMU,QAAQ,GAAGlB,KAAK,CAACiB,GAAN,CAAWE,IAAD,IAAQF,GAAG,CAACG,GAAJ,CAAQD,IAAI,CAACE,EAAb,EAAgBF,IAAhB,CAAlB,CAAjB;AACAZ,IAAAA,WAAW,CAACW,QAAD,CAAX;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAAClB,QAAD,CAAnB;AAEA,WAAOY,QAAP;AAEH,GAXD;;AAkBF,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,EAAE,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,WAFP;AAGE,UAAA,WAAW,EAAC,kCAHd;AAIE,UAAA,KAAK,EAAEd,KAJT;AAKE,UAAA,QAAQ,EAAGqB,CAAD,IAAOhB,WAAW,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF,eAkBE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBACGzB,QAAQ,GACPA,QAAQ,CAACe,GAAT,CAAcE,IAAD,iBACX;AAAA,+BACE,QAAC,IAAD;AAEE,UAAA,IAAI,EAAEA,IAFR;AAGE,UAAA,YAAY,EAAElB;AAHhB,WACOkB,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA;AADF,SAASF,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA,cADF,CADO,gBAWP;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CArFD;;GAAMtB,U;;KAAAA,U;AAuFN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\n\nconst BookSearch = ({books, onUpdateBook}) => {\n    \n\n    const [resBooks, setResBooks] = useState([]);\n\n    const [query, setQuery] = useState(\"\");\n\n    const [booksMap, setBooksMap]= useState(new Map());\n\n    \n    const updateQuery = (query) => {\n        setQuery(query);\n        \n      };\n\n      useEffect(() => {\n       \n          const getBooks = async () => {\n            const res = await BooksAPI.search(String(query));\n            res.error !== 'empty query'\n              ? AddShelfInfo(res,books)\n              : setResBooks();\n          };\n    \n          query !== '' ? getBooks() : setResBooks();\n        \n        \n      });\n     \n    const AddShelfInfo =(bookSearch, books)=>{\n\n        const map = new Map();\n\n        const bookDict = books.map((book)=>map.set(book.id,book))\n        setBooksMap(bookDict);\n        console.log(booksMap);\n        console.log(tyypeof(booksMap));\n\n        return bookDict;\n\n    }\n\n        \n       \n   \n\n    \n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to=\"/\">\n          Close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            name=\"book-data\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={query}\n            onChange={(e) => updateQuery(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\"></ol>\n      </div>\n      <ol className=\"books-grid\">\n        {resBooks ? (\n          resBooks.map((book) => (\n            <li key={book.id}>\n              <Book\n                key={book.id}\n                book={book}\n                onUpdateBook={onUpdateBook}\n              ></Book>\n            </li>\n          ))\n        ) : (\n          <div>\n            <p>No Books found</p>\n          </div>\n        )}\n      </ol>\n    </div>\n  );\n};\n\nexport default BookSearch;\n"]},"metadata":{},"sourceType":"module"}