{"ast":null,"code":"var _jsxFileName = \"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookSearch = ({\n  books,\n  onUpdateBook\n}) => {\n  _s();\n\n  const [resBooks, setResBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n  const updateQuery = query => {\n    setQuery(query);\n  };\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const res = await BooksAPI.search(String(query));\n      res.error !== 'empty query' ? setResBooks(res) : setResBooks();\n    };\n\n    query !== '' ? getBooks() : setResBooks();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"book-data\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: query,\n          onChange: e => updateQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"books-grid\",\n      children: resBooks ? resBooks.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onUpdateBook: onUpdateBook\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Books found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookSearch, \"8dtwe9l7zygT8gUJt9KWPHdYhvU=\");\n\n_c = BookSearch;\nexport default BookSearch; // import React from 'react';\n// import { Link } from 'react-router-dom';\n// import { useState, useEffect } from 'react';\n// import Book from './Book';\n// import * as BooksAPI from './BooksAPI';\n// const BookSearch = ({ books, onBookUpdate }) => {\n//   const [queryValue, setQueryValue] = useState('');\n//   const [resbooks, setResBooks] = useState([]);\n//   const updateQueryValue = (queryValue) => {\n//     setQueryValue(queryValue);\n//   };\n//   useEffect(() => {\n//       const fetch = async () => {\n//         const res = await BooksAPI.search(String(queryValue));\n//         res.error !== 'empty query'\n//           ? setResBooks(res)\n//           : setResBooks([]);\n//       };\n//       queryValue !== '' ? fetch() : setResBooks('');\n//   });\n//   const compareResWithShelfBooks = (resBooks, shelfBooks) => {\n//     const bookUpdates = Object.fromEntries(\n//       shelfBooks.map((temp) => [temp.id, temp])\n//     );\n//     const updatedBooks = resBooks.map((temp) => bookUpdates[temp.id] || temp);\n//     handleMissingShelfs(updatedBooks);\n//   };\n//   const handleMissingShelfs = (updatedBooks) => {\n//     let resBooksUpdateArray = [];\n//     updatedBooks.forEach((updatedBook) => {\n//       updatedBook.hasOwnProperty('shelf')\n//         ? void 0\n//         : (updatedBook.shelf = 'none');\n//       resBooksUpdateArray.push(updatedBook);\n//     });\n//     setResBooks(resBooksUpdateArray);\n//   };\n// //   return (\n// //     <div className=\"search-books\">\n// //       <div className=\"search-books-bar\">\n// //         <Link className=\"close-search\" to=\"/\">\n// //           Close\n// //         </Link>\n// //         <div className=\"search-books-input-wrapper\">\n// //           <input\n// //             type=\"text\"\n// //             name=\"book-data\"\n// //             placeholder=\"Search by title, author, or ISBN\"\n// //             value={queryValue}\n// //             onChange={(event) => updateQueryValue(event.target.value)}\n// //           />\n// //         </div>\n// //       </div>\n// //       <div className=\"search-books-results\">\n// //         <ol className=\"books-grid\"></ol>\n// //       </div>\n// //       <ol className=\"books-grid\">\n// //         {resbooks ? (\n// //           resbooks.map((book) => (\n// //             <li key={book.id}>\n// //               <Book\n// //                 key={book.id}\n// //                 book={book}\n// //                 onBookUpdate={onBookUpdate}\n// //               ></Book>\n// //             </li>\n// //           ))\n// //         ) : (\n// //           <div>\n// //             <p>No Books found</p>\n// //           </div>\n// //         )}\n// //       </ol>\n// //     </div>\n// //   );\n// // };\n// // export default BookSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookSearch\");","map":{"version":3,"sources":["/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js"],"names":["React","useEffect","useState","BooksAPI","Book","Link","BookSearch","books","onUpdateBook","resBooks","setResBooks","query","setQuery","updateQuery","getBooks","res","search","String","error","e","target","value","map","book","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\n\nconst BookSearch = ({books, onUpdateBook}) => {\n    \n\n    const [resBooks, setResBooks] = useState([])\n\n    const [query, setQuery] = useState(\"\")\n\n    \n    const updateQuery = (query) => {\n        setQuery(query);\n        \n      };\n\n      useEffect(() => {\n       \n          const getBooks = async () => {\n            const res = await BooksAPI.search(String(query));\n            res.error !== 'empty query'\n              ? setResBooks(res)\n              : setResBooks();\n          };\n    \n          query !== '' ? getBooks() : setResBooks();\n        \n        \n      });\n     \n    \n\n        \n       \n   \n\n    \n      return (\n        <div className=\"search-books\">\n          <div className=\"search-books-bar\">\n            <Link className=\"close-search\" to=\"/\">\n              Close\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n              <input\n                type=\"text\"\n                name=\"book-data\"\n                placeholder=\"Search by title, author, or ISBN\"\n                value={query}\n                onChange={(e) => updateQuery(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"search-books-results\">\n            <ol className=\"books-grid\"></ol>\n          </div>\n          <ol className=\"books-grid\">\n            {resBooks ? (\n              resBooks.map((book) => (\n                <li key={book.id}>\n                  <Book\n                    key={book.id}\n                    book={book}\n                    onUpdateBook={onUpdateBook}\n                  ></Book>\n                </li>\n              ))\n            ) : (\n              <div>\n                <p>No Books found</p>\n              </div>\n            )}\n          </ol>\n        </div>\n      );\n    };\nexport default BookSearch;\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import { useState, useEffect } from 'react';\n// import Book from './Book';\n// import * as BooksAPI from './BooksAPI';\n\n// const BookSearch = ({ books, onBookUpdate }) => {\n//   const [queryValue, setQueryValue] = useState('');\n//   const [resbooks, setResBooks] = useState([]);\n\n//   const updateQueryValue = (queryValue) => {\n//     setQueryValue(queryValue);\n//   };\n\n//   useEffect(() => {\n   \n//       const fetch = async () => {\n//         const res = await BooksAPI.search(String(queryValue));\n//         res.error !== 'empty query'\n//           ? setResBooks(res)\n//           : setResBooks([]);\n//       };\n\n//       queryValue !== '' ? fetch() : setResBooks('');\n   \n   \n//   });\n\n//   const compareResWithShelfBooks = (resBooks, shelfBooks) => {\n//     const bookUpdates = Object.fromEntries(\n//       shelfBooks.map((temp) => [temp.id, temp])\n//     );\n//     const updatedBooks = resBooks.map((temp) => bookUpdates[temp.id] || temp);\n//     handleMissingShelfs(updatedBooks);\n//   };\n\n//   const handleMissingShelfs = (updatedBooks) => {\n//     let resBooksUpdateArray = [];\n//     updatedBooks.forEach((updatedBook) => {\n//       updatedBook.hasOwnProperty('shelf')\n//         ? void 0\n//         : (updatedBook.shelf = 'none');\n//       resBooksUpdateArray.push(updatedBook);\n//     });\n//     setResBooks(resBooksUpdateArray);\n//   };\n\n// //   return (\n// //     <div className=\"search-books\">\n// //       <div className=\"search-books-bar\">\n// //         <Link className=\"close-search\" to=\"/\">\n// //           Close\n// //         </Link>\n// //         <div className=\"search-books-input-wrapper\">\n// //           <input\n// //             type=\"text\"\n// //             name=\"book-data\"\n// //             placeholder=\"Search by title, author, or ISBN\"\n// //             value={queryValue}\n// //             onChange={(event) => updateQueryValue(event.target.value)}\n// //           />\n// //         </div>\n// //       </div>\n// //       <div className=\"search-books-results\">\n// //         <ol className=\"books-grid\"></ol>\n// //       </div>\n// //       <ol className=\"books-grid\">\n// //         {resbooks ? (\n// //           resbooks.map((book) => (\n// //             <li key={book.id}>\n// //               <Book\n// //                 key={book.id}\n// //                 book={book}\n// //                 onBookUpdate={onBookUpdate}\n// //               ></Book>\n// //             </li>\n// //           ))\n// //         ) : (\n// //           <div>\n// //             <p>No Books found</p>\n// //           </div>\n// //         )}\n// //       </ol>\n// //     </div>\n// //   );\n// // };\n\n// // export default BookSearch;"]},"metadata":{},"sourceType":"module"}