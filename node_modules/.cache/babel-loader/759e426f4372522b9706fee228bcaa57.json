{"ast":null,"code":"var _jsxFileName = \"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js\",\n    _s = $RefreshSig$();\n\n// import { useEffect, useState } from \"react\";\n// import * as BooksAPI from \"./BooksAPI.js\";\n// import Book from \"./Book.js\";\n// import { Link } from \"react-router-dom\";\n// const BookSearch = ({books, onUpdateBook}) => {\n//     const [resBooks, setResBooks] = useState([])\n//     const [query, setQuery] = useState(\"\")\n//     const updateQuery = (query) => {\n//         setQuery(query);\n//       };\n//       useEffect(() => {\n//           const getBooks = async () => {\n//             const res = await BooksAPI.search(String(query));\n//             res.error !== 'empty query'\n//               ? setResBooks(res)\n//               : setResBooks();\n//           };\n//           query !== '' ? getBooks() : setResBooks();\n//       });\n//     return(\n//     <div className=\"search-books\">\n//         <div className=\"search-books-bar\">\n//             <div className=\"search-books-input-wrapper\">\n//             <Link\n//             to=\"/\"\n//             >\n//             Close\n//             </Link>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Search by title, author, or ISBN\"\n//                 value = {query}\n//                 onChange={(e)=>updateQuery(e.target.value)}\n//             />\n//             </div>\n//         </div>\n//         <div className=\"search-books-results\">\n//             <ol className=\"books-grid\"></ol>\n//         </div>\n//         <div className=\"search-books-result\">\n//             <ol classNanme=\"books-grid\">\n//             {   resBooks ? (\n//                 resBooks.map((book) => (\n//             <li key={book.id}>\n//               <Book\n//                 key={book.id}\n//                 bookData={book}\n//                 onBookUpdate={onUpdateBook}\n//               ></Book>\n//             </li>\n//           ))\n//         ) : (\n//           <div>\n//             <p>No Books found</p>\n//           </div>\n//         )}\n//             </ol>\n//         </div>\n//     </div>\n//     );\n//     };\n// export default BookSearch;\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Book from './Book';\nimport * as BooksAPI from './BooksAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookSearch = ({\n  books,\n  onBookUpdate\n}) => {\n  _s();\n\n  const [queryValue, setQueryValue] = useState('');\n  const [resbooks, setResBooks] = useState('');\n\n  const updateQueryValue = queryValue => {\n    setQueryValue(queryValue);\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      const res = await BooksAPI.search(String(queryValue));\n      res.error !== 'empty query' ? setResBooks(res) : setResBooks([]);\n    };\n\n    queryValue !== '' ? fetch() : setResBooks([]);\n  }); //   const compareResWithShelfBooks = (resBooks, shelfBooks) => {\n  //     const bookUpdates = Object.fromEntries(\n  //       shelfBooks.map((temp) => [temp.id, temp])\n  //     );\n  //     const updatedBooks = resBooks.map((temp) => bookUpdates[temp.id] || temp);\n  //     handleMissingShelfs(updatedBooks);\n  //   };\n  //   const handleMissingShelfs = (updatedBooks) => {\n  //     let resBooksUpdateArray = [];\n  //     updatedBooks.forEach((updatedBook) => {\n  //       updatedBook.hasOwnProperty('shelf')\n  //         ? void 0\n  //         : (updatedBook.shelf = 'none');\n  //       resBooksUpdateArray.push(updatedBook);\n  //     });\n  //     setResBooks(resBooksUpdateArray);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"book-data\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: queryValue,\n          onChange: event => updateQueryValue(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"books-grid\",\n      children: resbooks ? resbooks.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onBookUpdate: onBookUpdate\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Books found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookSearch, \"a82LFSwOWpzIC7BOiwEAvvn0564=\");\n\n_c = BookSearch;\nexport default BookSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookSearch\");","map":{"version":3,"sources":["/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js"],"names":["React","Link","useState","useEffect","Book","BooksAPI","BookSearch","books","onBookUpdate","queryValue","setQueryValue","resbooks","setResBooks","updateQueryValue","fetch","res","search","String","error","event","target","value","map","book","id"],"mappings":"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","sourcesContent":["// import { useEffect, useState } from \"react\";\n// import * as BooksAPI from \"./BooksAPI.js\";\n// import Book from \"./Book.js\";\n// import { Link } from \"react-router-dom\";\n// const BookSearch = ({books, onUpdateBook}) => {\n    \n\n//     const [resBooks, setResBooks] = useState([])\n\n//     const [query, setQuery] = useState(\"\")\n\n    \n//     const updateQuery = (query) => {\n//         setQuery(query);\n        \n//       };\n\n//       useEffect(() => {\n       \n//           const getBooks = async () => {\n//             const res = await BooksAPI.search(String(query));\n//             res.error !== 'empty query'\n//               ? setResBooks(res)\n//               : setResBooks();\n//           };\n    \n//           query !== '' ? getBooks() : setResBooks();\n        \n        \n//       });\n     \n    \n\n        \n       \n   \n\n    \n//     return(\n    \n//     <div className=\"search-books\">\n//         <div className=\"search-books-bar\">\n            \n//             <div className=\"search-books-input-wrapper\">\n//             <Link\n//             to=\"/\"\n//             >\n//             Close\n//             </Link>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Search by title, author, or ISBN\"\n//                 value = {query}\n//                 onChange={(e)=>updateQuery(e.target.value)}\n          \n//             />\n           \n            \n//             </div>\n//         </div>\n//         <div className=\"search-books-results\">\n//             <ol className=\"books-grid\"></ol>\n//         </div>\n\n//         <div className=\"search-books-result\">\n//             <ol classNanme=\"books-grid\">\n//             {   resBooks ? (\n//                 resBooks.map((book) => (\n//             <li key={book.id}>\n//               <Book\n//                 key={book.id}\n//                 bookData={book}\n//                 onBookUpdate={onUpdateBook}\n//               ></Book>\n//             </li>\n//           ))\n//         ) : (\n//           <div>\n//             <p>No Books found</p>\n//           </div>\n//         )}\n                \n                       \n//             </ol>\n//         </div>\n//     </div>\n//     );\n//     };\n\n// export default BookSearch;\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Book from './Book';\nimport * as BooksAPI from './BooksAPI';\n\nconst BookSearch = ({ books, onBookUpdate }) => {\n  const [queryValue, setQueryValue] = useState('');\n  const [resbooks, setResBooks] = useState('');\n\n  const updateQueryValue = (queryValue) => {\n    setQueryValue(queryValue);\n  };\n\n  useEffect(() => {\n   \n      const fetch = async () => {\n        const res = await BooksAPI.search(String(queryValue));\n        res.error !== 'empty query'\n          ? setResBooks(res)\n          : setResBooks([]);\n      };\n\n      queryValue !== '' ? fetch() : setResBooks([]);\n   \n   \n  });\n\n//   const compareResWithShelfBooks = (resBooks, shelfBooks) => {\n//     const bookUpdates = Object.fromEntries(\n//       shelfBooks.map((temp) => [temp.id, temp])\n//     );\n//     const updatedBooks = resBooks.map((temp) => bookUpdates[temp.id] || temp);\n//     handleMissingShelfs(updatedBooks);\n//   };\n\n//   const handleMissingShelfs = (updatedBooks) => {\n//     let resBooksUpdateArray = [];\n//     updatedBooks.forEach((updatedBook) => {\n//       updatedBook.hasOwnProperty('shelf')\n//         ? void 0\n//         : (updatedBook.shelf = 'none');\n//       resBooksUpdateArray.push(updatedBook);\n//     });\n//     setResBooks(resBooksUpdateArray);\n//   };\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to=\"/\">\n          Close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            name=\"book-data\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={queryValue}\n            onChange={(event) => updateQueryValue(event.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\"></ol>\n      </div>\n      <ol className=\"books-grid\">\n        {resbooks ? (\n          resbooks.map((book) => (\n            <li key={book.id}>\n              <Book\n                key={book.id}\n                book={book}\n                onBookUpdate={onBookUpdate}\n              ></Book>\n            </li>\n          ))\n        ) : (\n          <div>\n            <p>No Books found</p>\n          </div>\n        )}\n      </ol>\n    </div>\n  );\n};\n\nexport default BookSearch;"]},"metadata":{},"sourceType":"module"}