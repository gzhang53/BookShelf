[{"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/index.js":"1","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/App.js":"2","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BooksAPI.js":"3","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelvesDisplay.js":"4","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelfCategory.js":"5","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/Book.js":"6","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelfChanger.js":"7","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/bookSearch.js":"8","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js":"9"},{"size":259,"mtime":1703270696824,"results":"10","hashOfConfig":"11"},{"size":1128,"mtime":1703622398944,"results":"12","hashOfConfig":"11"},{"size":1055,"mtime":1702091100752,"results":"13","hashOfConfig":"11"},{"size":1300,"mtime":1703622721964,"results":"14","hashOfConfig":"11"},{"size":882,"mtime":1703621457683,"results":"15","hashOfConfig":"11"},{"size":1444,"mtime":1703621229156,"results":"16","hashOfConfig":"11"},{"size":872,"mtime":1703186505558,"results":"17","hashOfConfig":"11"},{"size":2030,"mtime":1703274425357,"results":"18","hashOfConfig":"11"},{"size":2460,"mtime":1703622396408,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1kpd2oe",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/index.js",[],["45","46"],"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/App.js",["47","48","49"],"import React,{ useState, useEffect } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport BookShelvesDisplay from './BookShelvesDisplay.js';\nimport BookSearch from \"./BookSearch.js\";\n\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  const [showSearchPage, setShowSearchpage] = useState(false);\n\n  useEffect(()=>{\n      const getBooks = async()=> {\n      const res = await BooksAPI.getAll();\n      setBooks(res);\n      \n    };\n    getBooks();}\n  ,[]);\n  \n  \n  const onUpdateShelf = (book,newShelf)=>{\n\n    const updateBooks = async()=> {\n      const res = await BooksAPI.update(book,newShelf);\n      const res2 = await BooksAPI.getAll();\n      setBooks(res2);\n    };\n    updateBooks();\n  }\n  return (\n    <Routes>\n    <Route exact path=\"/\" element={<BookShelvesDisplay books={books}\n      onUpdateShelf={onUpdateShelf}></BookShelvesDisplay>}>\n\n    </Route>\n    <Route exact path=\"/bookSearch\" element={<BookSearch books={books} onUpdateBook={onUpdateShelf}></BookSearch>}>\n\n    </Route>\n    \n    </Routes>\n  );\n}\n\nexport default App;\n","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BooksAPI.js",[],"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelvesDisplay.js",[],"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelfCategory.js",[],"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/Book.js",["50"],"import React, { useState } from \"react\";\nimport BookShelfChanger from \"./BookShelfChanger\";\n\nconst Book = ({book, onUpdateBook})=>{\n\nconst bookShelfUpdater = (shelf)=>{\n\n    onUpdateBook(book, shelf);\n}\n\nconst getThumbnail = () => {\n    const thumbnail = book.imageLinks.thumbnail?\n       `url(${book.imageLinks.thumbnail})`\n      : ``;\n    return thumbnail;\n  };\n\n\nreturn(\n            <div className=\"book\">\n                <div className=\"book-top\">\n                            \n                            <div\n                                className=\"book-cover\"\n                                style={{\n                                width: 128,\n                                height: 193,\n                                backgroundImage:getThumbnail()\n                                    // `url(${book.imageLinks.thumbnail})`,\n                                }}\n                            >\n\n                            </div>\n                            <BookShelfChanger shelf={book.shelf} onUpdateShelf={bookShelfUpdater}>\n                            </BookShelfChanger>\n                            </div>\n                            <div className=\"book-title\">{book.title}</div>\n                            <div className=\"book-authors\">{book.publisher}</div>\n                            \n                            \n                       \n                        </div>\n\n                        )    };\n\nexport default Book;","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookShelfChanger.js",["51"],"import React,{ useEffect, useState } from \"react\";\n\n\nconst BookShelfChanger = ({shelf, onUpdateShelf})=>{\n                                  \n    const [selected, setSelected] = useState('');\n    \n    useState(()=>setSelected(shelf));\n\n    const onShelfChange = (e)=>{\n\n        setSelected(e.target.value);\n        onUpdateShelf(e.target.value);\n        \n\n    };\n\n    return (\n    <div className=\"book-shelf-changer\">\n         <select value={selected} onChange={onShelfChange}>\n            <option value=\"none\" disabled>\n            Move to...\n            </option>\n            <option value=\"currentlyReading\">\n            Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n        </select> \n    </div>)\n};\n\nexport default BookShelfChanger;","/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/bookSearch.js",["52","53","54"],"import { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport * as Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\nconst BookSearch = ({books, onUpdateBook}) => {\n    \n\n    const [resBooks, setResBooks] = useState([])\n\n    const [query, setQuery] = useState(\"\")\n\n    \n    const updateQuery = (query) => {\n        setQuery(query.trim());\n      };\n\n   \n    useEffect((query)=>{\n\n        const getBooks = async ()=>{\n            const res = await BooksAPI.search(String(query));\n\n            res.error !== 'empty query'?\n\n            compareBooks(res,books):\n            setResBooks(res);\n\n        };\n\n        getBooks(); \n\n    },[]);\n\n    const compareBooks = (resBooks,books) =>{\n        \n        const map = new Map();\n\n        books.map((book)=>map.set(book.id, book));\n\n        resBooks.map((book)=>{\n            if (map.has(book.id)){\n                book.shelf = map(book.id).shelf\n            }\n            else{\n                book.shelf = 'none'\n            }\n        })\n\n       \n    };\n\n    \n    return(\n    \n    <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n            <Link\n            to=\"/\"\n            >\n            Close\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title, author, or ISBN\"\n                value = {query}\n                onClick={updateQuery}\n          \n            />\n            </div>\n        </div>\n        <div className=\"search-books-results\">\n            <ol className=\"books-grid\"></ol>\n        </div>\n\n        <div className=\"search-books-result\">\n            <ol classNanme=\"books-grid\">\n            {resBooks.map((book)=>{<li>\n                        <Book book={book} onUpdateBook={onUpdateBook}>\n\n                        </Book>\n                        </li>})};\n                \n                       \n            </ol>\n        </div>\n    </div>\n    );\n    };\n\nexport default BookSearch;",["55","56"],"/Users/Jimmy/Desktop/react_project/nd0191-c1-myreads/starter/src/BookSearch.js",["57","58"],"import { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Book from \"./Book.js\";\nimport { Link } from \"react-router-dom\";\n\nconst BookSearch = ({books, onUpdateBook}) => {\n    \n\n    const [resBooks, setResBooks] = useState([]);\n\n    const [query, setQuery] = useState(\"\");\n\n    \n\n    \n    const updateQuery = (query) => {\n        setQuery(query);\n        \n      };\n\n      useEffect(() => {\n       \n          const getBooks = async () => {\n            const res = await BooksAPI.search(String(query));\n            res.error !== 'empty query'\n              ? AddShelfInfo(res,books)\n              : setResBooks();\n          };\n    \n          query !== '' ? getBooks() : setResBooks();\n        \n        \n      });\n     \n\n    const AddShelfInfo=(bookSearch,bookOnShelf)=>{\n\n        const ShelfBookMap = BooksMap(bookOnShelf);\n\n        const merged = bookSearch.map((book)=> ShelfBookMap.get(book.id)||book);\n\n        consolidatedBooks(merged);\n    }\n\n    const consolidatedBooks = (bookArray)=>{\n      let BookSearchFinalArray = [];\n\n\n      bookArray.map((book)=> {book.shelf?\n      void 0:\n      (book.shelf = 'None');\n      BookSearchFinalArray.push(book)})\n      setResBooks(BookSearchFinalArray);\n\n    }\n\n    const BooksMap =(books)=>{\n\n        const bookmap = new Map();\n       \n\n        books.map((book)=>bookmap.set(book.id,book))\n        \n\n        return bookmap;\n\n    }\n\n        \n       \n   \n\n    \n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to=\"/\">\n          Close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            name=\"book-data\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={query}\n            onChange={(e) => updateQuery(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\"></ol>\n      </div>\n      <ol className=\"books-grid\">\n        {resBooks ? (\n          resBooks.map((book) => (\n            <li key={book.id}>\n              <Book\n                key={book.id}\n                book={book}\n                onUpdateBook={onUpdateBook}\n              ></Book>\n            </li>\n          ))\n        ) : (\n          <div>\n            <p>No Books found</p>\n          </div>\n        )}\n      </ol>\n    </div>\n  );\n};\n\nexport default BookSearch;\n",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":12,"column":10,"nodeType":"65","messageId":"66","endLine":12,"endColumn":24},{"ruleId":"63","severity":1,"message":"67","line":12,"column":26,"nodeType":"65","messageId":"66","endLine":12,"endColumn":43},{"ruleId":"63","severity":1,"message":"68","line":27,"column":13,"nodeType":"65","messageId":"66","endLine":27,"endColumn":16},{"ruleId":"63","severity":1,"message":"69","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"70","line":1,"column":16,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":32,"column":7,"nodeType":"73","endLine":32,"endColumn":9,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":40,"column":28,"nodeType":"77","messageId":"78","endLine":40,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":78,"column":33,"nodeType":"77","messageId":"78","endLine":78,"endColumn":35},{"ruleId":"59","replacedBy":"79"},{"ruleId":"61","replacedBy":"80"},{"ruleId":"71","severity":1,"message":"81","line":21,"column":7,"nodeType":"65","endLine":21,"endColumn":16,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"76","line":49,"column":27,"nodeType":"77","messageId":"78","endLine":49,"endColumn":29},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'showSearchPage' is assigned a value but never used.","Identifier","unusedVar","'setShowSearchpage' is assigned a value but never used.","'res' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'books'. Either include it or remove the dependency array.","ArrayExpression",["85"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["83"],["84"],"React Hook useEffect contains a call to 'setResBooks'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [query, AddShelfInfo, books] as a second argument to the useEffect Hook.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [books]",{"range":"91","text":"92"},"Add dependencies array: [query, AddShelfInfo, books]",{"range":"93","text":"94"},[676,678],"[books]",[744,744],", [query, AddShelfInfo, books]"]